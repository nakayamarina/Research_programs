install.package("R6")
install.packages("R6")
Japan
library(R6)
Q
quit
quit()
setwd("~/Desktop/nakayama/Research/Research_programs")
if (!require(package = "TDA")) {
install.packages(pkgs = "TDA")
}
if (!require(package = "scatterplot3d")) {
install.packages(pkgs = "scatterplot3d")
}
library(TDA)
library(scatterplot3d)
print('################ TDAvec_autocor.r excution ###################')
PATH <- '../tameshi/20170130ar/mb/MAL5/'
ms <- 3
DIR_attractor <- paste(PATH, 'TDAvec_autocor_attractor', sep="")
PATH_attractor <- paste(DIR_attractor, '/', sep="")
if(!file.exists(PATH_attractor)) {
dir.create(DIR_attractor)
}
DIR_tda <- paste(PATH, 'TDAvec_autocor_barcode', sep="")
PATH_tda <- paste(DIR_tda, '/', sep="")
if(!file.exists(PATH_tda)) {
dir.create(DIR_tda)
}
Attractor <- function(voxel, tau, voxel_no, task){
x <- voxel[1:(nrow(voxel) - (2*tau)), 1]
y <- voxel[(1 + tau):(nrow(voxel) - (tau)), 1]
z <- voxel[(1 + (2*tau)):nrow(voxel), 1]
xyz <- cbind(x, y, z)
graph_name <- paste("Mapping to 3dim space : ", task, "-voxel", voxel_no, sep="")
PATH_graph <- paste(PATH_attractor, "voxel", voxel_no, '_', task, '.png', sep="")
png(PATH_graph)
scatterplot3d(xyz, xlab = "x = t", ylab = "y = t + τ", zlab = "z = t + 2*τ", pch = 16, type="o", main = graph_name)
dev.off()
print(graph_name)
return (xyz)
}
TDAvec <- function(attractor, voxel_no, task){
tda <- ripsDiag(X = attractor, maxdimension = 2, maxscale = ms)
barcode_name <- paste("Barcode Diagram (TDA) : ", task, "-voxel", voxel_no, sep="")
PATH_barcode <- paste(PATH_tda, "voxel", voxel_no, '_', task, '.png', sep="")
png(PATH_barcode)
plot(tda$diagram, barcode = TRUE, main = barcode_name)
dev.off()
df_tda <- as.data.frame(tda$diagram[, 1:3])
}
PATH_rest <- paste(PATH, 'raw_rest.csv', sep = "")
PATH_tap <- paste(PATH, 'raw_tap.csv', sep = "")
PATH_tau <- paste(PATH, 'TAUautocor.csv', sep = "")
rest <- read.csv(PATH_rest)
tap <- read.csv(PATH_tap)
taus <- read.csv(PATH_tau)
i <- 1
voxel_rest <- rest[i]
voxel_tap <- tap[i]
tau_rest <- taus[i, 1]
tau_tap <- taus[i, 2]
attractor_rest <- Attractor(voxel_rest, tau_rest, i, "Rest")
attractor_tap <- Attractor(voxel_tap, tau_tap, i, "Tapping")
TDAvec(attractor_rest, i, "Rest")
TDAvec(attractor_tap, i, "Tapping")
df_tda
tda
attractor <- attractor_rest
tda <- ripsDiag(X = attractor, maxdimension = 2, maxscale = ms)
tda
tda$diagram[,1:3]
df_tda <- as.data.frame(tda$diagram[, 1:3])
View(df_tda)
df_tda
zeroDim <- subset(df_tda, df_tda$dimension == 0)
zeroDim
zeroDim <- subset(df_tda, df_tda$dimension == 0)
oneDim <- subset(df_tda, df_tda$dimension == 1)
twoDim <- subset(df_tda, df_tda$dimension == 2)
hole <- zeroDim
ms
ms/100
ms/900
ms/300
nrow(hole)
tameshi <- c()
tameshi <- c(tameshi, 1)
tameshi <- c(tameshi, 3)
tameshi
hoke
hole
while(count != kizamiNumber){
print(count)
count = count + 1
}
kizamiNumber <- 300
kizamiWidth <- ms/countNumbert
count <- 0
bettiNumber <- c()
while(count != kizamiNumber){
print(count)
count = count + 1
}
kizamiWidth <- ms/countNumbert
kizamiWidth <- ms/kizamiNumbert
kizamiWidth <- ms/kizamiNumber
count <- 0
bettiNumbers <- c()
while(count != kizamiNumber){
time <- 0
betti
print(time)
time = time + kizemiWidth
count = count + 1
}
while(count != kizamiNumber){
time <- 0
print(time)
time = time + kizemiWidth
count = count + 1
}
kizamiNumber <- 300
kizamiWidth <- ms/kizamiNumber
count <- 0
bettiNumbers <- c()
while(count != kizamiNumber){
time <- 0
print(time)
time = time + kizamiWidth
count = count + 1
}
time <- 0
while(count != kizamiNumber){
print(time)
time = time + kizamiWidth
count = count + 1
}
kizamiNumber <- 300
kizamiWidth <- ms/kizamiNumber
time <- 0
count <- 0
bettiNumbers <- c()
while(count != kizamiNumber){
print(time)
time = time + kizamiWidth
count = count + 1
}
hole
hole[j]
hole[1]
hole[,1]
hole[1,]
hole$Birth[1]
kizamiNumber <- 300
kizamiWidth <- ms/kizamiNumber
time <- 0
k <- 0
bettiNumbers <- c()
while(k != kizamiNumber){
bettiCount <- 0
for(j in 1:nrow(hole)){
if((hole$Birth[j] <= time) && (time <= hole$Death[j])){
bettiCount = bettiCount + 1
}
}
bettiNumbers <- c(bettiNumbers, bettiCount)
time = time + kizamiWidth
k = k + 1
}
bettiNumbers
length(bettiNumbers)
ta <- numeric(300)
ta
Betti <- c(bettiNumbers, ta)
Betti
length(Betti)
attractor_rest
i
restVec <- rbind(restVec, TDAvec(attractor_rest, i, "Rest"))
restVec <- c()
restVec <- rbind(restVec, TDAvec(attractor_rest, i, "Rest"))
restVec
restVec
tdaVec <- c(BettiNumberCount(zeroDim), BettiNumberCount(oneDim), BettiNumberCount(twoDim))
BettiNumberCount <- function(holeDim){
kizamiNumber <- 300
kizamiWidth <- ms/kizamiNumber
time <- 0
k <- 0
bettiNumbers <- c()
if(nrow(hole) >= 1){
while(k != kizamiNumber){
bettiCount <- 0
for(j in 1:nrow(hole)){
if((hole$Birth[j] <= time) && (time <= hole$Death[j])){
bettiCount = bettiCount + 1
}
}
bettiNumbers <- c(bettiNumbers, bettiCount)
time = time + kizamiWidth
k = k + 1
}
} else {
bettiNumbers <- numeric(300)
}
return(bettiNumbers)
}
tdaVec <- c(BettiNumberCount(zeroDim), BettiNumberCount(oneDim), BettiNumberCount(twoDim))
tdaVec
restVec <- rbind(restVec, tdaVec)
restVec
restVec
restVec <- c()
restVec
tdaVec
rbind(restVec, tdaVec)
restVec <- rbind(restVec, TDAvec(attractor_rest, i, "Rest"))
restVec
library(TDA)
library(scatterplot3d)
print('################ TDAvec_autocor.r excution ###################')
PATH <- '../tameshi/20170130ar/mb/MAL5/'
ms <- 3
DIR_attractor <- paste(PATH, 'TDAvec_autocor_attractor', sep="")
PATH_attractor <- paste(DIR_attractor, '/', sep="")
if(!file.exists(PATH_attractor)) {
dir.create(DIR_attractor)
}
DIR_tda <- paste(PATH, 'TDAvec_autocor_barcode', sep="")
PATH_tda <- paste(DIR_tda, '/', sep="")
if(!file.exists(PATH_tda)) {
dir.create(DIR_tda)
}
Attractor <- function(voxel, tau, voxel_no, task){
x <- voxel[1:(nrow(voxel) - (2*tau)), 1]
y <- voxel[(1 + tau):(nrow(voxel) - (tau)), 1]
z <- voxel[(1 + (2*tau)):nrow(voxel), 1]
xyz <- cbind(x, y, z)
graph_name <- paste("Mapping to 3dim space : ", task, "-voxel", voxel_no, sep="")
PATH_graph <- paste(PATH_attractor, "voxel", voxel_no, '_', task, '.png', sep="")
png(PATH_graph)
scatterplot3d(xyz, xlab = "x = t", ylab = "y = t + τ", zlab = "z = t + 2*τ", pch = 16, type="o", main = graph_name)
dev.off()
print(graph_name)
return (xyz)
}
PATH_rest <- paste(PATH, 'raw_rest.csv', sep = "")
PATH_tap <- paste(PATH, 'raw_tap.csv', sep = "")
PATH_tau <- paste(PATH, 'TAUautocor.csv', sep = "")
rest <- read.csv(PATH_rest)
tap <- read.csv(PATH_tap)
taus <- read.csv(PATH_tau)
restVec <- c()
tapBec <- c()
i <- 1
voxel_rest <- rest[i]
voxel_tap <- tap[i]
tau_rest <- taus[i, 1]
tau_tap <- taus[i, 2]
attractor_rest <- Attractor(voxel_rest, tau_rest, i, "Rest")
attractor_tap <- Attractor(voxel_tap, tau_tap, i, "Tapping")
attractor_rest
attractor <- attractor_rest
voxel_no <- 1
task <- "Rest"
tda <- ripsDiag(X = attractor, maxdimension = 2, maxscale = ms)
df_tda <- as.data.frame(tda$diagram[, 1:3])
zeroDim <- subset(df_tda, df_tda$dimension == 0)
oneDim <- subset(df_tda, df_tda$dimension == 1)
twoDim <- subset(df_tda, df_tda$dimension == 2)
zeroDim
tdaVec <- c(BettiNumberCount(zeroDim), BettiNumberCount(oneDim), BettiNumberCount(twoDim))
BettiNumberCount <- function(holeDim){
kizamiNumber <- 300
kizamiWidth <- ms/kizamiNumber
time <- 0
k <- 0
bettiNumbers <- c()
if(nrow(hole) >= 1){
while(k != kizamiNumber){
bettiCount <- 0
for(j in 1:nrow(hole)){
if((hole$Birth[j] <= time) && (time <= hole$Death[j])){
bettiCount = bettiCount + 1
}
}
bettiNumbers <- c(bettiNumbers, bettiCount)
time = time + kizamiWidth
k = k + 1
}
} else {
bettiNumbers <- numeric(300)
}
return(bettiNumbers)
}
tdaVec <- c(BettiNumberCount(zeroDim), BettiNumberCount(oneDim), BettiNumberCount(twoDim))
BettiNumberCount <- function(hole){
kizamiNumber <- 300
kizamiWidth <- ms/kizamiNumber
time <- 0
k <- 0
bettiNumbers <- c()
if(nrow(hole) >= 1){
while(k != kizamiNumber){
bettiCount <- 0
for(j in 1:nrow(hole)){
if((hole$Birth[j] <= time) && (time <= hole$Death[j])){
bettiCount = bettiCount + 1
}
}
bettiNumbers <- c(bettiNumbers, bettiCount)
time = time + kizamiWidth
k = k + 1
}
} else {
bettiNumbers <- numeric(300)
}
return(bettiNumbers)
}
tdaVec <- c(BettiNumberCount(zeroDim), BettiNumberCount(oneDim), BettiNumberCount(twoDim))
tdaVec
voxel_rest <- rest[i]
voxel_tap <- tap[i]
tau_rest <- taus[i, 1]
tau_tap <- taus[i, 2]
attractor_rest <- Attractor(voxel_rest, tau_rest, i, "Rest")
attractor_tap <- Attractor(voxel_tap, tau_tap, i, "Tapping")
restVec <- rbind(restVec, TDAvec(attractor_rest, i, "Rest"))
TDAvec <- function(attractor, voxel_no, task){
tda <- ripsDiag(X = attractor, maxdimension = 2, maxscale = ms)
barcode_name <- paste("Barcode Diagram (TDA) : ", task, "-voxel", voxel_no, sep="")
PATH_barcode <- paste(PATH_tda, "voxel", voxel_no, '_', task, '.png', sep="")
png(PATH_barcode)
plot(tda$diagram, barcode = TRUE, main = barcode_name)
dev.off()
df_tda <- as.data.frame(tda$diagram[, 1:3])
zeroDim <- subset(df_tda, df_tda$dimension == 0)
oneDim <- subset(df_tda, df_tda$dimension == 1)
twoDim <- subset(df_tda, df_tda$dimension == 2)
tdaVec <- c(BettiNumberCount(zeroDim), BettiNumberCount(oneDim), BettiNumberCount(twoDim))
return(tdaVec)
}
restVec <- rbind(restVec, TDAvec(attractor_rest, i, "Rest"))
restVec
as.data.frame(tdaVec)
as.data.frame(restVec)
a <- as.data.frame(restVec)
View(attractor)
View(a)
if (!require(package = "TDA")) {
install.packages(pkgs = "TDA")
}
if (!require(package = "scatterplot3d")) {
install.packages(pkgs = "scatterplot3d")
}
library(TDA)
library(scatterplot3d)
print('################ TDAvec_autocor.r excution ###################')
PATH <- '../tameshi/20170130ar/mb/MAL5/'
ms <- 3
DIR_attractor <- paste(PATH, 'TDAvec_autocor_attractor', sep="")
PATH_attractor <- paste(DIR_attractor, '/', sep="")
if(!file.exists(PATH_attractor)) {
dir.create(DIR_attractor)
}
DIR_tda <- paste(PATH, 'TDAvec_autocor_barcode', sep="")
PATH_tda <- paste(DIR_tda, '/', sep="")
if(!file.exists(PATH_tda)) {
dir.create(DIR_tda)
}
Attractor <- function(voxel, tau, voxel_no, task){
x <- voxel[1:(nrow(voxel) - (2*tau)), 1]
y <- voxel[(1 + tau):(nrow(voxel) - (tau)), 1]
z <- voxel[(1 + (2*tau)):nrow(voxel), 1]
xyz <- cbind(x, y, z)
graph_name <- paste("Mapping to 3dim space : ", task, "-voxel", voxel_no, sep="")
PATH_graph <- paste(PATH_attractor, "voxel", voxel_no, '_', task, '.png', sep="")
png(PATH_graph)
scatterplot3d(xyz, xlab = "x = t", ylab = "y = t + τ", zlab = "z = t + 2*τ", pch = 16, type="o", main = graph_name)
dev.off()
print(graph_name)
return (xyz)
}
TDAvec <- function(attractor, voxel_no, task){
tda <- ripsDiag(X = attractor, maxdimension = 2, maxscale = ms)
barcode_name <- paste("Barcode Diagram (TDA) : ", task, "-voxel", voxel_no, sep="")
PATH_barcode <- paste(PATH_tda, "voxel", voxel_no, '_', task, '.png', sep="")
png(PATH_barcode)
plot(tda$diagram, barcode = TRUE, main = barcode_name)
dev.off()
df_tda <- as.data.frame(tda$diagram[, 1:3])
zeroDim <- subset(df_tda, df_tda$dimension == 0)
oneDim <- subset(df_tda, df_tda$dimension == 1)
twoDim <- subset(df_tda, df_tda$dimension == 2)
tdaVec <- c(BettiNumberCount(zeroDim), BettiNumberCount(oneDim), BettiNumberCount(twoDim))
return(tdaVec)
}
BettiNumberCount <- function(hole){
kizamiNumber <- 300
kizamiWidth <- ms/kizamiNumber
time <- 0
k <- 0
bettiNumbers <- c()
if(nrow(hole) >= 1){
while(k != kizamiNumber){
bettiCount <- 0
for(j in 1:nrow(hole)){
if((hole$Birth[j] <= time) && (time <= hole$Death[j])){
bettiCount = bettiCount + 1
}
}
bettiNumbers <- c(bettiNumbers, bettiCount)
time = time + kizamiWidth
k = k + 1
}
} else {
bettiNumbers <- numeric(300)
}
return(bettiNumbers)
}
PATH_rest <- paste(PATH, 'raw_rest.csv', sep = "")
PATH_tap <- paste(PATH, 'raw_tap.csv', sep = "")
PATH_tau <- paste(PATH, 'TAUautocor.csv', sep = "")
rest <- read.csv(PATH_rest)
tap <- read.csv(PATH_tap)
taus <- read.csv(PATH_tau)
restVec <- c()
tapBec <- c()
for(i in 1:3{
voxel_rest <- rest[i]
voxel_tap <- tap[i]
tau_rest <- taus[i, 1]
tau_tap <- taus[i, 2]
attractor_rest <- Attractor(voxel_rest, tau_rest, i, "Rest")
attractor_tap <- Attractor(voxel_tap, tau_tap, i, "Tapping")
restVec <- rbind(restVec, TDAvec(attractor_rest, i, "Rest"))
tapVec <- rbind(tapVec, TDAvec(attractor_tap, i, "Tapping"))
}
PATH_restVec <- paste(PATH, 'TDAvec_autocor_rest.csv', sep = "")
write.csv(as.data.frame(restVec), PATH_restVec, quote = FALSE, row.names = FALSE)
PATH_tapVec <- paste(PATH, 'TDAvec_autocor_tap.csv', sep = "")
write.csv(as.data.frame(tapVec), PATH_tapVec, quote = FALSE, row.names = FALSE)
for(i in 1:3){
voxel_rest <- rest[i]
voxel_tap <- tap[i]
tau_rest <- taus[i, 1]
tau_tap <- taus[i, 2]
attractor_rest <- Attractor(voxel_rest, tau_rest, i, "Rest")
attractor_tap <- Attractor(voxel_tap, tau_tap, i, "Tapping")
restVec <- rbind(restVec, TDAvec(attractor_rest, i, "Rest"))
tapVec <- rbind(tapVec, TDAvec(attractor_tap, i, "Tapping"))
}
tapVec <- c()
for(i in 1:3){
voxel_rest <- rest[i]
voxel_tap <- tap[i]
tau_rest <- taus[i, 1]
tau_tap <- taus[i, 2]
attractor_rest <- Attractor(voxel_rest, tau_rest, i, "Rest")
attractor_tap <- Attractor(voxel_tap, tau_tap, i, "Tapping")
restVec <- rbind(restVec, TDAvec(attractor_rest, i, "Rest"))
tapVec <- rbind(tapVec, TDAvec(attractor_tap, i, "Tapping"))
}
PATH_restVec <- paste(PATH, 'TDAvec_autocor_rest.csv', sep = "")
write.csv(as.data.frame(restVec), PATH_restVec, quote = FALSE, row.names = FALSE)
PATH_tapVec <- paste(PATH, 'TDAvec_autocor_tap.csv', sep = "")
write.csv(as.data.frame(tapVec), PATH_tapVec, quote = FALSE, row.names = FALSE)
